using Microsoft.VisualBasic;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Diagnostics.Metrics;
using System.Linq.Expressions;
using System.Numerics;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Runtime.Intrinsics.Arm;
using static System.Runtime.InteropServices.JavaScript.JSType;

public class Program
{
    public static void Main()
    {
        Program program = new Program();
        program.Task_1_1(new double[] { 0, 1.5, 1, 3, -2.2, -0.5 });
    }
    #region Level 1
    public double[] Task_1_1(double[] array)
    {
        double sum = 0;
        // code here
        for (int i = 0; i < array.Length; i++) sum += array[i];
        for (int i = 0; i < array.Length; i++) array[i] = Math.Round(array[i] / sum, 2);
            // end
        return array;
    }
    public double[] Task_1_2(double[] array)
    {
        // code here
        double sum = 0, n = 0, sr = 0;

        for (int i = 0; i < array.Length; i++)
        {
            if (array[i] > 0)
            {
                n += 1;
                sum += array[i];
            }
        }
        sr = sum / n;
        for (int i = 0; i < array.Length; i++) 
        {
            if (array[i] > 0)
            {
                array[i] = sr;
                
            }
            array[i] = Math.Round(array[i], 2);
        }
            // end

        return array;
    }
    public (double[], double[]) Task_1_3(double[] first, double[] second)
    {
        double[] sum = new double[first.Length], dif = new double[first.Length];

        // code here
        for (int i = 0; i < first.Length; i++)
        {
            sum[i] = Math.Round(first[i] + second[i], 2);
            dif[i] = Math.Round(first[i] - second[i], 2);
        }
        // end
        return (sum, dif);
    }
    public double[] Task_1_4(double[] array)
    {
        // code here
        double sr = 0, n = 0;
        for (int i = 0; i < array.Length; i++)
        {
            sr += array[i];
            n += 1;
        }
        sr = sr / n;
        for (int i = 0; i < array.Length; i++) array[i] = Math.Round(array[i] - sr, 2);

        // end

        return array;
    }
    public double Task_1_5(double[] vector1, double[] vector2)
    {
        double product = 0;

        // code here
        for (int i = 0; i < vector1.Length; i++) product += vector1[i] * vector2[i];
        // end
        product = Math.Round(product, 2);
        return product;
    }
    public double Task_1_6(double[] vector)
    {
        double length = 0;

        // code here
        for (int i = 0; i < vector.Length; i++) length += vector[i] * vector[i];
        length = Math.Round(Math.Sqrt(length), 2);
        // end

        return Math.Round(length, 4); ;
    }
    public double[] Task_1_7(double[] array)
    {
        // code here
        double sr = 0, n = 0;
        for (int i = 0; i < array.Length; i ++)
        {
            sr += array[i];
            n += 1;
        }
        sr = sr / n;
        for (int i = 0; i < array.Length; i++) if (array[i] > sr) array[i] = 0;
        // end

        return array;
    }
    public int Task_1_8(double[] array)
    {
        int count = 0;

        // code here
        for (int i = 0; i < array.Length;i++) if (array[i] < 0) count++;
        // end

        return count;
    }
    public int Task_1_9(double[] array)
    {
        int count = 0;
        double sr = 0;
        // code here
        for (int i = 0;i < array.Length;i++) sr += array[i];
        sr = sr / array.Length;
        for (int i = 0; i < array.Length; i++) if (array[i] > sr) count += 1; 
        // end

        return count;
    }
    public int Task_1_10(double[] array, int P, int Q)
    {
        int count = 0;

        // code here
        for (int i = 0; i < array.Length; i++) if ((array[i] < Q) && (array[i] > P)) count++;
        // end

        return count;
    }
    public double[] Task_1_11(double[] array)
    {
        double[] output = null;
        int plus = 0, k = 0;
        // code here
        for (int i = 0; i < array.Length; i++) if (array[i] > 0) plus++;
        output = new double[plus];
        for (int i = 0; i < array.Length; i++)
        {
            if (array[i] > 0)
            {
                output[k] = array[i];
                k += 1;
            }
        }
        // end

        return output;
    }
    public (double, int) Task_1_12(double[] array)
    {
        double value = 0;
        int index = -1;

        // code here
        for (int i = 0; i < array.Length; i++)
        {
            if (array[i] < 0)
            {
                value = array[i];
                index = i;
            }
        }
        // end

        return (value, index);
    }
    public (double[], double[]) Task_1_13(double[] array)
    {
        double[] even = new double[array.Length / 2];
        double[] odd = new double[array.Length/2];
        int k1 = 0, k2 = 0;
        // code here
        for (int i = 0; i < array.Length; i++)
        {
            if (i % 2 == 0)
            {
                even[k1] = array[i];
                k1 += 1;
            }
            else
            {
                odd[k2] = array[i];
                k2 += 1;    
            }
        }
        // end

        return (even, odd);
    }
    public double Task_1_14(double[] array)
    {
        double sum = 0;

        // code here
        for(int i = 0; i < array.Length; i++)
        {
            if (array[i] < 0) break;
            sum += Math.Pow(array[i], 2);
        }
        // end

        return sum;
    }
    public double[] Task_1_15(double[] x)
    {
        double[] y = new double[x.Length];

        // code here
        for (int i = 0; i < x.Length; i++)
        {
            if (0.5 * Math.Log(x[i]) < 0) y[i] = double.NaN;
            else y[i] = Math.Round(0.5 * Math.Log(x[i]),2);
        }
        // end

        return y;
    }
    #endregion

    #region Level 2
    public double[] Task_2_1(double[] array)
    {
        // code here
        double min = 92834798237;
        int min_i = 91;
        for (int i = 0; i < array.Length; i ++)
        {
            if (min > array[i])
            {
                min_i = i;
                min = array[i];
            }
        }
        if (array[min_i] > 0) array[min_i] = array[min_i] * 2;
        else array[min_i] = array[min_i] / 2;
        // end
        return array;
    }
    public double Task_2_2(double[] array)
    {
        double sum = 0;

        // code here
        double max = -10000;
        int max_i = -1;
        for (int i = 0; i < array.Length; i++)
        {
            if ((double)array[i] > max)
            {
                max_i = i;
                max = array[i];
            }
        }
        for (int i = 0; i < max_i; i++)
        {
            sum += array[i] ;
        }
            // end

        return sum;
    }
    public double[] Task_2_3(double[] array)
    {
        double min = 984092384020;
        int min_i = -1;
        for (int i = 0; i < array.Length; i++)
        {
            if ((double)array[i] < min)
            {
                min_i = i;
                min = array[i];
            }
        
        }
        Console.WriteLine(min_i);
        for (int i = 0; i < min_i; i++)
        {
            if (array[i] > 0) array[i] = array[i] * 2;
            else array[i] = array[i] / 2;

        }
        return array;
    }
    public double[] Task_2_4(double[] array)
    {
        // code here
        double sum = 0, sr =  0, max = -100000;
        int max_i = -1;
        for (int i = 0; i < array.Length; i++)
        {
            sum += array[i];
            if (max < array[i])
            {
                max = array[i];
                max_i = i;  
            }
        }
        sr = Math.Round(sum / array.Length,2);
        
        for (int i = max_i + 1; i < array.Length; i++) array[i] = sr;
        // end

        return array;
    }
    public double[] Task_2_5(double[] array)
    {
        // code here
        double max = -1000000, min = 189479174;
        int max_i = -1, min_i = 52, minus = 0, k = 0;
        for (int i = 0; i < array.Length; i++)
        {
            if (max < array[i])
            {
                max_i = i;
                max = array[i];
            }
            if (min >array[i])
            {
                min_i = i;
                min = array[i];
            }
        }
        for (int i = min_i + 1; i < max_i; i++) if (array[i] < 0) minus += 1;
        if (max_i < min_i) { array = new double[0]; return array; }
        double[] output = new double[minus];
        for (int i = min_i + 1; i < max_i; i++) 
        {
            if (array[i] < 0)
            {
               
                output[k] = array[i];
                k += 1;
            }
        }
        foreach (double x in output) Console.Write(x + " ");
        return output;
    }
    public double[] Task_2_6(double[] array, double P)
    {
        // code here
        double sr = 0, msr = 0, ksr = 456456464;
        int l = array.Length;
        for (int i = 0; i < array.Length; i++) sr += array[i];
        sr = sr / array.Length;
        
        for (int i = 0; i < array.Length; i++)
        {

            if (ksr > Math.Abs(sr - array[i]))
            {
                ksr = Math.Abs(sr - array[i]);
                msr = array[i];
            }
        }
        double[] output = new double[l + 1];
        for (int i = 0; i < output.Length; i += 1)
        {
            if (array[i] == msr)
            {
                for (int j = i + 1; j < output.Length; j++)
                {
                    output[j] = array[j - 1];
                    
                }
                output[i + 1] = P;
                output[i] = msr;
                break;
            }
            else
            {
                output[i] = array[i];
            }
        }
            // end

        return output;
    }
    public double[] Task_2_7(double[] array)
    {
        // code here
        double max = double.MinValue;
        for (int i = 0; i < array.Length ; i++) if (max < array[i]) max = array[i];
        for (int i = 0; i < array.Length ; i ++)
        {
            if ((array[i] == max) && (i + 1 != array.Length))
            {
                if (array[i + 1] > 0)
                {
                    array[i + 1] *= 2;
                    break;
                }
                else
                    array[i + 1] /= 2;
                    break;
            }
        }
            // end

        return array;
    }
    public double[] Task_2_8(double[] array)
    {
        // code here
        double max = double.MinValue, min = double.MaxValue, kn = 0;
        int max_i = 0, min_i = 0;
        for (int i = 0; i < array.Length; i++) 
        {
            if (max < array[i]) 
            {
                max_i = i;
                max = array[i];
            }
        }
        for (int i = max_i; i < array.Length; i++)
        {
            if (min > array[i]) 
            {
                min_i = i;
                min = array[i];
            }
        }
        kn = array[min_i];
        array[min_i] = array[max_i];
        array[max_i] = kn;
        // end

        return array;
    }
    public double Task_2_9(double[] array)
    {
        double average = 0;

        // code here
        double max = double.MinValue, min = double.MaxValue;
        int max_i = 0, min_i = 0, k1 = 0;
        for (int i = 0; i < array.Length; i++)
        {
            if (max < array[i])
            {
                max_i = i;
                max = array[i];
                
            }
        }
        for (int i = 0; i < array.Length; i++)
        {
            if (min > array[i])
            {
                min_i = i;
                min = array[i];   
            }
        }
        Console.WriteLine(min_i);
        if ((min_i > max_i) && (Math.Abs(max_i - min_i)) > 1)
        {
            for (int i = max_i + 1; i < min_i; i++)
            {
                average += array[i];

                k1 += 1;
            }
        }
        else
        if (min_i < max_i) 
        {
            for (int i = min_i + 1; i < max_i; i++)
            {
                average += array[i];

                k1 += 1;
            }
        }
        else
        {
            average = 0;
            k1 = 1;
        }
        average = Math.Round(average / k1, 2);
       
        
        // end

        return average;
    }
    public double[] Task_2_10(double[] array)
    {
        // code here
        int k = 0;
        double min = double.MaxValue;
        for (int i  = 0; i < array.Length; i++) if ((array[i] > 0) && (min > array[i])) min = array[i];

        double[] output = new double[array.Length - 1];
        if (min == double.MaxValue) return array;
        for (int i  = 0; i < array.Length; i++)
        {
            
            if ((array[i] == min)) continue;
            else
            {
                output[k] = array[i];
                k += 1;
            }
        }
        for (int i = 0;i < output.Length;i ++) Console.WriteLine(output[i]);    
        // end
       
        return output;
    }
    public double[] Task_2_11(double[] array, double P)
    {
        // code here
        int Last_elem = -1;
        double elem = 0;
        for (int i = 0; i < array.Length; i++) if (array[i] > 0) Last_elem = i;
        if (Last_elem == -1) return array;
        double[] output = new double[array.Length + 1];
        for (int i = 0; i < output.Length; i += 1)
        {
            if (i == Last_elem)
            {
                for (int j = i + 1; j < output.Length ; j++)
                {
                    output[j] = array[j - 1];
                }
                output[i + 1] = P;
                output[i] = array[Last_elem];
                break;
            }
            else
            {
                output[i] = array[i];
            }
        }
        output[Last_elem + 1] = P;
        //for (int i = 0; i < output.Length;i ++) Console.WriteLine(output[i]);
        // end

        return output;
    }
    public double[] Task_2_12(double[] array)
    {
     
        // code he
        double max = double.MinValue, sum = 0;
        int max_i = 0;
        for (int i = 0; i < array.Length; i++)
        {
            if (max < array[i])
            {
                max_i = i;
                max = array[i];
            }
        }
        for (int i = max_i + 1;i < array.Length; i++)  sum += array[i];
        sum = Math.Round(sum, 2);
        for (int i = 0; i < array.Length; i++)
        {
            if (array[i] < 0)
            {
                array[i] = sum;
                break;
            }
        }
        Console.WriteLine(sum);
        // end

        return array;
    }
    public double[] Task_2_13(double[] array)
    {
        // code here
        double max = double.MinValue;
        int max_i = 0;
        for (int i = 0; i < array.Length; i += 2)
        {
            if (max < array[i])
            {
                max_i = i;
                max = array[i];
            }
        }
        array[max_i] = max_i;
        // end

        return array;
    }
    public double[] Task_2_14(double[] array)
    {
        // code here
        double max = double.MinValue, zamena = 0;
        int max_i = 0, min_1 = -1;
        for (int i = 0; i < array.Length; i ++)
        {
            if (max < array[i])
            {
                max_i = i;
                max = array[i];
            }
        }
        for (int i = 0; i < array.Length; i++)
        {
            if (array[i] < 0)
            {
                min_1 = i;
                break;
            }
        }
        if (min_1 == -1) return array;
        zamena = max;
        array[max_i] = array[min_1];
        array[min_1] = zamena;
        // end
        return array;
    }
    public double[] Task_2_15(double[] A, double[] B, int k)
    {
        double[] output = new double[A.Length + B.Length];
        int n = 0;
        // code here
        if (A.Length <= k) return A;
        for (int i = 0; i < output.Length;i++)
        {
            output[i] = A[n];
            if (i == k + 1)
            {
                for (int j = 0; j < B.Length; j ++)
                {
                    output[i] = B[j];
                    i += 1;
                }
                i -= 1;
                continue;
            }
            n++;
        }
        // end
        for (int i = 0; i < output.Length; i++) Console.Write(output[i] + " ");
        return output;
    }
    public int[] Task_2_16(double[] array)
    {
        
        double sr = 0;
        int n = 0;
        // code here
        for (int i = 0; i < array.Length; i ++ ) sr += array[i];
        sr /= array.Length;
        for (int i = 0; i < array.Length; i++) if (array[i] < sr) n += 1;
        int[] output = new int[n];
        n = 0;
        for (int i = 0; i < array.Length; i++)
        {
            if (array[i] < sr)
            {
                output[n] = i;
                n += 1;
            }
        }
                // end

        return output;
    }
    public double Task_2_17(double[] array)
    {
        double average = 0, max = double.MinValue, min = double.MaxValue, n = 0; ;
        int min_i = 0, max_i = 0;
        // code here
        for (int i = 0; i < array.Length; i++)
        {
            if (max < array[i])
            {
                max = array[i];
                max_i = i;
            }
            if (min > array[i])
            {
                min = array[i];
                min_i = i;
            }
        }
        if (max_i < min_i)
        {
            for (int i = 0; i < array.Length; i++)
            {
                if (array[i] > 0)
                {
                    average += array[i];
                    n += 1;
                }
            }
            if (average == 0) return 0;
        }
        else
        {
            for (int i = 0; i < array.Length; i++)
            {
                if (array[i] < 0)
                {
                    average += array[i];
                    n += 1;
                }
            }
            if (average == 0) return 0;
        }
        // end

        return Math.Round(average/n,2);
    }
    public double[] Task_2_18(double[] array)
    {
        // code here
        double max_ch = double.MinValue, max_nch = double.MinValue;
        for (int i = 0; i < array.Length; i += 2) if (array[i] > max_ch) max_ch = array[i];
        for (int i = 1; i < array.Length; i += 2) if (array[i] > max_nch) max_nch = array[i];
        if (max_ch > max_nch) for (int i = 0; i < array.Length / 2; i++) array[i] = 0;
        else for (int i = array.Length /2; i < array.Length; i++) array[i] = 0;
        // end
        return array;
    }
    public double[] Task_2_19(double[] array)
    {
        // code here
        double max = double.MinValue, sum = 0;
        int max_i = 0;
        for (int i = 0;i < array.Length;i++)
        {
            if (max < array[i])
            {
                max = array[i];
                max_i = i;
            }
            sum += array[i];
        }
        if (sum < max) array[max_i] = 0;
        else array[max_i] *= 2;
        // end
        return array;
    }
    public double Task_2_20(double[] array)
    {
        double sum = 0;

        // code here
        
        // end

        return sum;
    }
    #endregion
    #region Level 3
    public int[] Task_3_1(double[] array)
    {
        int[] output = null;

        // code here

        // end

        return output;
    }
    public double[] Task_3_2(double[] array)
    {
        // code here

        // end

        return array;
    }
    public double[] Task_3_3(double[] array)
    {
        // code here

        // end

        return array;
    }
    public double[] Task_3_4(double[] array)
    {
        // code here

        // end

        return array;
    }
    public double[] Task_3_5(double[] array)
    {
        // code here

        // end

        return array;
    }
    public int Task_3_6(double[] array)
    {
        int count = 0;

        // code here

        // end

        return count;
    }
    public double[] Task_3_7(double[] array)
    {
        // code here

        // end

        return array;
    }
    public double[] Task_3_8(double[] array)
    {
        // code here

        // end

        return array;
    }
    public int Task_3_9(double[] array)
    {
        int count = 0;

        // code here

        // end

        return count;
    }
    public double[] Task_3_10(double[] array)
    {
        // code here

        // end

        return array;
    }
    public (double[], double[], double, double) Task_3_11(double a, double b, int n)
    {
        double[] X = null, Y = null;
        double globalMax = 0, globalMin = 0;

        // code here

        // end

        return (X, Y, globalMax,globalMin);
    }
    public double[] Task_3_12(double[] array)
    {
        // code here

        // end

        return array;
    }
    public double[] Task_3_13(double[] array)
    {
        // code here

        // end

        return array;
    }
    public double[] Task_3_14(double[] array)
    {
        double[] normalizedArray = null;

        // code here

        // end

        return normalizedArray;
    }
    #endregion
}
